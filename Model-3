def reward_function(params):
    # Example of penalize steering, which helps mitigate zig-zag behaviors

    # Read input parameters
    distance_from_center = params['distance_from_center']
    track_width = params['track_width']
    abs_steering = abs(params['steering_angle']) # Only need the absolute steering angle
    steps = params['steps']
    progress = params['progress']
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']
    
    
    SPEED_THRESHOLD = 1.0
    
    if not all_wheels_on_track:
        # Penalize if the car goes off the track
        reward = 1e-3
    elif speed < SPEED_THRESHOLD:
        # Penalize if the car goes too slow
        reward = 0.5
    else:
        #High reward if car stays on track and goes fast
        reward =1.0
    
    # Calculate 3 marks that are farther and father away from the center line
    marker_1 = 0.1 * track_width
    marker_2 = 0.25 * track_width
    marker_3 = 0.5 * track_width

    # Give higher reward if the car is closer to center line and vice versa
    if distance_from_center <= marker_1:
        reward = 1.0
    elif distance_from_center <= marker_2:
        reward = 0.5
    elif distance_from_center <= marker_3:
        reward = 0.1
    else:
        reward = 1e-3  # likely crashed/ close to off track

    # Steering penality threshold, change the number based on your action space setting
    ABS_STEERING_THRESHOLD = 15 
    
    # Penalize reward if the car is steering too much
    if abs_steering > ABS_STEERING_THRESHOLD:
        reward *= 0.8
        
    # Total number of steps we want a car to finish the lap
    TOTAL_NUM_STEPS = 300
    
    # Intialize reward with a typical value
    reward = 1.0
    
    #Give additional reward if the pass every 100 steps faster than expected
    if(steps % 100) == 0 and progress > (steps / TOTAL_NUM_STEPS) * 100:
        reward  += 10.0
    return float(reward)
